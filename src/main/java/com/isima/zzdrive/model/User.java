package com.isima.zzdrive.model;

import java.security.NoSuchAlgorithmException;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.KeySpec;
import java.util.HashSet;
import java.util.Set;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.PBEKeySpec;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;
import org.primefaces.util.Base64;

/**
 * User generated by hbm2java
 */
@Entity
@Table(name="user"
    ,catalog="zzdrive"
    , uniqueConstraints = @UniqueConstraint(columnNames="username") 
)
public class User implements java.io.Serializable {

    private int iduser;
    private String username;
    private String firstname;
    private String lastname;
    private String password;
    private Set<Role> roles = new HashSet<Role>(0);
    private Set<Access> accesses = new HashSet<Access>(0);

    public User() {
    }
	
    public User(int iduser, String username, String password) {
        this.iduser = iduser;
        this.username = username;
        this.password = password;
    }
    
    public User(int iduser, String username, String firstname, String lastname, String password, Set<Role> roles, Set<Access> accesses) {
       this.iduser = iduser;
       this.username = username;
       this.firstname = firstname;
       this.lastname = lastname;
       this.password = password;
       this.roles = roles;
       this.accesses = accesses;
    }
   
    @Id
    @Column(name="iduser", unique=true, nullable=false)
    public int getIduser() {
        return this.iduser;
    }
    
    public void setIduser(int iduser) {
        this.iduser = iduser;
    }
    
    @Column(name="username", unique=true, nullable=false)
    public String getUsername() {
        return this.username;
    }
    
    public void setUsername(String username) {
        this.username = username;
    }
    
    @Column(name="firstname")
    public String getFirstname() {
        return this.firstname;
    }
    
    public void setFirstname(String firstname) {
        this.firstname = firstname;
    }
    
    @Column(name="lastname")
    public String getLastname() {
        return this.lastname;
    }
    
    public void setLastname(String lastname) {
        this.lastname = lastname;
    }
    
    @Column(name="password", nullable=false)
    public String getPassword() {
        return this.password;
    }
    
    public void setPassword(String password) {
        this.password = password;
    }
    
    @ManyToMany(cascade=CascadeType.ALL, fetch=FetchType.LAZY)
    @JoinTable(name="userrole", catalog="zzdrive", joinColumns = {
        @JoinColumn(name="iduser", nullable=false, updatable=false) }, inverseJoinColumns = { 
        @JoinColumn(name="idrole", nullable=false, updatable=false) }
    )
    public Set<Role> getRoles() {
        return this.roles;
    }
    
    public void setRoles(Set<Role> roles) {
        this.roles = roles;
    }
    
    @OneToMany(cascade=CascadeType.ALL, fetch=FetchType.LAZY, mappedBy="user")
    public Set<Access> getAccesses() {
        return this.accesses;
    }
    
    public void setAccesses(Set<Access> accesses) {
        this.accesses = accesses;
    }

    public void setPasswordToHash(String passwordPlaintext) throws NoSuchAlgorithmException, InvalidKeySpecException {
        this.setPassword(this.computeHash(passwordPlaintext));
    }

    public boolean checkPasswordForLogin(String password) throws NoSuchAlgorithmException, InvalidKeySpecException {
        if (null == password || password.isEmpty()) {
            return false;
        }
        System.out.println("---------------- password -----------------");
        System.out.println(this.computeHash(password));
        return this.getPassword().equals(this.computeHash(password));
    }

    private String computeHash(String password) throws NoSuchAlgorithmException, InvalidKeySpecException {
        KeySpec spec = new PBEKeySpec(password.toCharArray(), Integer.toString(this.getIduser()).getBytes(), 2048, 160);
        SecretKeyFactory fact = SecretKeyFactory.getInstance("PBKDF2WithHmacSHA1");
        
        return Base64.encodeToString(fact.generateSecret(spec).getEncoded(), false);
    }
}


